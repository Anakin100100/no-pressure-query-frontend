/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    HTTPValidationError,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    User,
    UserFromJSON,
    UserToJSON,
    UserCreate,
    UserCreateFromJSON,
    UserCreateToJSON,
} from '../models';

export interface CreateUserUsersPostRequest {
    userCreate: UserCreate;
}

export interface DeleteUserUsersDeleteUserDeleteUserIdGetRequest {
    deleteUserId: number;
}

export interface GenerateTokenApiTokenPostRequest {
    username: string;
    password: string;
    grantType?: string;
    scope?: string;
    clientId?: string;
    clientSecret?: string;
}

export interface ReadUserUsersUserIdGetRequest {
    userId: number;
}

export interface UpdateUserEmailUsersUpdateUserEmailUpdateUserIdGetRequest {
    updateUserId: number;
    newEmail: string;
}

export interface UpdateUserFirstNameUsersUpdateUserFirstNameUpdateUserIdGetRequest {
    updateUserId: number;
    newFirstName: string;
}

export interface UpdateUserFirstNameUsersUpdateUserLastNameUpdateUserIdGetRequest {
    updateUserId: number;
    newLastName: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create User
     */
    async createUserUsersPostRaw(requestParameters: CreateUserUsersPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.userCreate === null || requestParameters.userCreate === undefined) {
            throw new runtime.RequiredError('userCreate','Required parameter requestParameters.userCreate was null or undefined when calling createUserUsersPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserCreateToJSON(requestParameters.userCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Create User
     */
    async createUserUsersPost(requestParameters: CreateUserUsersPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<User> {
        const response = await this.createUserUsersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete User
     */
    async deleteUserUsersDeleteUserDeleteUserIdGetRaw(requestParameters: DeleteUserUsersDeleteUserDeleteUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.deleteUserId === null || requestParameters.deleteUserId === undefined) {
            throw new runtime.RequiredError('deleteUserId','Required parameter requestParameters.deleteUserId was null or undefined when calling deleteUserUsersDeleteUserDeleteUserIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/users/delete_user/{delete_user_id}`.replace(`{${"delete_user_id"}}`, encodeURIComponent(String(requestParameters.deleteUserId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete User
     */
    async deleteUserUsersDeleteUserDeleteUserIdGet(requestParameters: DeleteUserUsersDeleteUserDeleteUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<any> {
        const response = await this.deleteUserUsersDeleteUserDeleteUserIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generate Token
     */
    async generateTokenApiTokenPostRaw(requestParameters: GenerateTokenApiTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling generateTokenApiTokenPost.');
        }

        if (requestParameters.password === null || requestParameters.password === undefined) {
            throw new runtime.RequiredError('password','Required parameter requestParameters.password was null or undefined when calling generateTokenApiTokenPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.grantType !== undefined) {
            formParams.append('grant_type', requestParameters.grantType as any);
        }

        if (requestParameters.username !== undefined) {
            formParams.append('username', requestParameters.username as any);
        }

        if (requestParameters.password !== undefined) {
            formParams.append('password', requestParameters.password as any);
        }

        if (requestParameters.scope !== undefined) {
            formParams.append('scope', requestParameters.scope as any);
        }

        if (requestParameters.clientId !== undefined) {
            formParams.append('client_id', requestParameters.clientId as any);
        }

        if (requestParameters.clientSecret !== undefined) {
            formParams.append('client_secret', requestParameters.clientSecret as any);
        }

        const response = await this.request({
            path: `/api/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Generate Token
     */
    async generateTokenApiTokenPost(requestParameters: GenerateTokenApiTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<any> {
        const response = await this.generateTokenApiTokenPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Read Root
     */
    async readRootApiGetRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Read Root
     */
    async readRootApiGet(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<any> {
        const response = await this.readRootApiGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Read User Return Token
     */
    async readUserReturnTokenUsersMeGetRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/users/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Read User Return Token
     */
    async readUserReturnTokenUsersMeGet(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<User> {
        const response = await this.readUserReturnTokenUsersMeGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Read User
     */
    async readUserUsersUserIdGetRaw(requestParameters: ReadUserUsersUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling readUserUsersUserIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Read User
     */
    async readUserUsersUserIdGet(requestParameters: ReadUserUsersUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<User> {
        const response = await this.readUserUsersUserIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update User Email
     */
    async updateUserEmailUsersUpdateUserEmailUpdateUserIdGetRaw(requestParameters: UpdateUserEmailUsersUpdateUserEmailUpdateUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.updateUserId === null || requestParameters.updateUserId === undefined) {
            throw new runtime.RequiredError('updateUserId','Required parameter requestParameters.updateUserId was null or undefined when calling updateUserEmailUsersUpdateUserEmailUpdateUserIdGet.');
        }

        if (requestParameters.newEmail === null || requestParameters.newEmail === undefined) {
            throw new runtime.RequiredError('newEmail','Required parameter requestParameters.newEmail was null or undefined when calling updateUserEmailUsersUpdateUserEmailUpdateUserIdGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.newEmail !== undefined) {
            queryParameters['new_email'] = requestParameters.newEmail;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/users/update_user_email/{update_user_id}`.replace(`{${"update_user_id"}}`, encodeURIComponent(String(requestParameters.updateUserId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Update User Email
     */
    async updateUserEmailUsersUpdateUserEmailUpdateUserIdGet(requestParameters: UpdateUserEmailUsersUpdateUserEmailUpdateUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<any> {
        const response = await this.updateUserEmailUsersUpdateUserEmailUpdateUserIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update User First Name
     */
    async updateUserFirstNameUsersUpdateUserFirstNameUpdateUserIdGetRaw(requestParameters: UpdateUserFirstNameUsersUpdateUserFirstNameUpdateUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.updateUserId === null || requestParameters.updateUserId === undefined) {
            throw new runtime.RequiredError('updateUserId','Required parameter requestParameters.updateUserId was null or undefined when calling updateUserFirstNameUsersUpdateUserFirstNameUpdateUserIdGet.');
        }

        if (requestParameters.newFirstName === null || requestParameters.newFirstName === undefined) {
            throw new runtime.RequiredError('newFirstName','Required parameter requestParameters.newFirstName was null or undefined when calling updateUserFirstNameUsersUpdateUserFirstNameUpdateUserIdGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.newFirstName !== undefined) {
            queryParameters['new_first_name'] = requestParameters.newFirstName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/users/update_user_first_name/{update_user_id}`.replace(`{${"update_user_id"}}`, encodeURIComponent(String(requestParameters.updateUserId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Update User First Name
     */
    async updateUserFirstNameUsersUpdateUserFirstNameUpdateUserIdGet(requestParameters: UpdateUserFirstNameUsersUpdateUserFirstNameUpdateUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<any> {
        const response = await this.updateUserFirstNameUsersUpdateUserFirstNameUpdateUserIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update User First Name
     */
    async updateUserFirstNameUsersUpdateUserLastNameUpdateUserIdGetRaw(requestParameters: UpdateUserFirstNameUsersUpdateUserLastNameUpdateUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.updateUserId === null || requestParameters.updateUserId === undefined) {
            throw new runtime.RequiredError('updateUserId','Required parameter requestParameters.updateUserId was null or undefined when calling updateUserFirstNameUsersUpdateUserLastNameUpdateUserIdGet.');
        }

        if (requestParameters.newLastName === null || requestParameters.newLastName === undefined) {
            throw new runtime.RequiredError('newLastName','Required parameter requestParameters.newLastName was null or undefined when calling updateUserFirstNameUsersUpdateUserLastNameUpdateUserIdGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.newLastName !== undefined) {
            queryParameters['new_last_name'] = requestParameters.newLastName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/users/update_user_last_name/{update_user_id}`.replace(`{${"update_user_id"}}`, encodeURIComponent(String(requestParameters.updateUserId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Update User First Name
     */
    async updateUserFirstNameUsersUpdateUserLastNameUpdateUserIdGet(requestParameters: UpdateUserFirstNameUsersUpdateUserLastNameUpdateUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<any> {
        const response = await this.updateUserFirstNameUsersUpdateUserLastNameUpdateUserIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
